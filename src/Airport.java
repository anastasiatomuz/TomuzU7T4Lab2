import java.util.ArrayList;

public class Airport
{
    /** A list of the flights into and out of this airport
     *  Guaranteed not to be null and to contain only non-null entries
     */
    private ArrayList<Flight> allFlights;

    public Airport(ArrayList<Flight> flights)
    {
        allFlights = flights;
    }

    public ArrayList<Flight> getAllFlights()
    {
        return allFlights;
    }

    /*
    Write the Airport method getTotalRevenue.
    The method returns the total revenue for all flights into and out of the airport.
    Revenue for a flight is the product of the number of passengers on the flight and
    the price of a seat on the flight. All seats on a particular flight have the same price.

    Some flights sell more seats than there is capacity for, since passengers sometimes cancel
    or modify reservations. If there are more passengers on a flight than the flight has capacity
    for, the revenue for the flight is the product of the capacity and the price of a seat on the flight.

     */

    /** Returns the revenue generated by all flights at the airport,
     *  as described in part (a)
     */
    public double getTotalRevenue()
    {
        int totalRevenue = 0;
        for (Flight flight : allFlights){
            if (flight.getNumPassengers() > flight.getCapacity()){
                totalRevenue += flight.getCapacity() * flight.getPrice();
            }
            else{
                totalRevenue += flight.getNumPassengers() * flight.getPrice();
            }
        }
        return totalRevenue;
    }

    /*
    Write the Airport method updateFlights.
    The method removes from the ArrayList allFlights any flight where the number of passengers
    is less than 20 percent of the total capacity.
    The method should return the total number of passengers whose flights were removed.
     */


    /** Updates the list of flights by removing certain flights and
     *  returns the total number of passengers whose flights were removed,
     *  as described in part (b)
     */
    public int updateFlights()
    {
        int passengersRemoved = 0;
        for (int i = 0; i < allFlights.size(); i ++){
            if (allFlights.get(i).getNumPassengers() < 0.2 * allFlights.get(i).getCapacity()){
                passengersRemoved += allFlights.remove(i).getNumPassengers();
                i --;
            }
        }
        return passengersRemoved;
    }
}
